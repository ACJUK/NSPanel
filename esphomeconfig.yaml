# Set some variables for convenience
substitutions:
  node_name: nspanel
  device_name: NSPanel

# Note: this may not be needed if the pull request has been merged.
# Check https://github.com/esphome/esphome/pull/2956 for current status.
external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable logging
logger:

# Enable wireless updates
ota:

# Enable Home Assistant API
api:
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'
        
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - lambda: |-
#              auto time_text = id(homeassistant_time).now().strftime("%I:%M%p");
#              id(disp1).set_component_text("home.time", time_text.c_str());

# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name
  - platform: template
    name: $device_name TFT Upload
    device_class: update
    on_press:
      - lambda: 'id(disp1).upload_tft();'


# Define some inputs
binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1
    on_release:
      lambda: 'id(disp1).send_command_printf("click wake_button,0");'

  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2
    on_release:
      lambda: 'id(disp1).send_command_printf("click wake_button,0");'
      
  #House Modes
  - platform: nextion
    name: $device_name Day Mode
    page_id: 0
    component_id: 22
    on_press:
      then:
        - homeassistant.service:
            service: input_boolean.toggle
            data:
              entity_id: input_boolean.day_mode
    
  - platform: nextion
    name: $device_name Evening Mode
    page_id: 0
    component_id: 23
    on_press:
      then:
        - homeassistant.service:
            service: input_boolean.toggle
            data:
              entity_id: input_boolean.evening_mode
    
  - platform: nextion
    name: $device_name Night Mode
    page_id: 0
    component_id: 24
    on_press:
      then:
        - homeassistant.service:
            service: input_boolean.toggle
            data:
              entity_id: input_boolean.night_mode
              
  #Lounge Lights            
  - platform: nextion
    name: $device_name Lounge Ceiling
    page_id: 1
    component_id: 7
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.lounge_ceiling
              
  - platform: nextion
    name: $device_name Salt Lamps
    page_id: 1
    component_id: 8
    on_press:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: group.salt
              
  - platform: nextion
    name: $device_name Vase
    page_id: 1
    component_id: 9
    on_press:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: switch.lounge_vase_lights
              
  - platform: nextion
    name: $device_name Patio Door
    page_id: 1
    component_id: 10
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.lounge_patio_door_lamp
              
  - platform: nextion
    name: $device_name Dining Main
    page_id: 1
    component_id: 11
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.dining_ceiling
              
  - platform: nextion
    name: $device_name Sideboard
    page_id: 1
    component_id: 12
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.sideboard_lamp
              
  - platform: nextion
    name: $device_name Big
    page_id: 1
    component_id: 13
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.dining_big_lamp
              
  - platform: nextion
    name: $device_name Sharon
    page_id: 2
    component_id: 7
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.bedside_sharon
              
  - platform: nextion
    name: $device_name Andy
    page_id: 2
    component_id: 8
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.bedside_andy
              
  - platform: nextion
    name: $device_name Bedroom Ceiling
    page_id: 2
    component_id: 9
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.bedroom_ceiling
              
  - platform: nextion
    name: $device_name Wardrobe
    page_id: 2
    component_id: 10
    on_press:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.wardrobe


sensor:
  - platform: homeassistant # outside temperature
    id: temp_outside
    entity_id: sensor.garden_sensor_temperature

  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: ntc
    id: current_temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: $device_name Temperature

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.garden_sensor_temperature
    attribute: temperature

  - platform: homeassistant
    id: lounge_temperature
    entity_id: climate.netatmo_lounge
    attribute: current_temperature

  - platform: homeassistant
    id: lounge_setpoint
    entity_id: climate.netatmo_lounge
    attribute: temperature

  - platform: homeassistant
    id: bedroom_temperature
    entity_id: climate.netatmo_our_room
    attribute: current_temperature

  - platform: homeassistant
    id: bedroom_setpoint
    entity_id: climate.netatmo_our_room
    attribute: temperature

  - platform: homeassistant
    id: office_temperature
    entity_id: climate.netatmo_office
    attribute: current_temperature
    
  - platform: homeassistant
    id: office_setpoint
    entity_id: climate.netatmo_office
    attribute: temperature

  - platform: homeassistant
    id: stairs_temperature
    entity_id: sensor.landing_sensor_temperature
    attribute: temperature
       
  - platform: homeassistant
    id: kitchen_temperature
    entity_id: climate.netatmo_kitchen
    attribute: current_temperature
    
  - platform: homeassistant
    id: kitchen_setpoint
    entity_id: climate.netatmo_kitchen
    attribute: temperature

# Define some outputs
switch:
  # The two relays
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    
text_sensor:
  #House Modes
  - platform: homeassistant
    id: day_mode
    entity_id: input_boolean.day_mode

  - platform: homeassistant
    id: evening_mode
    entity_id: input_boolean.evening_mode
    
  - platform: homeassistant
    id: night_mode
    entity_id: input_boolean.night_mode
    
  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.home

  - platform: homeassistant
    id: spain
    entity_id: sensor.trip_spain

  - platform: homeassistant
    id: sun_sun
    entity_id: sun.sun
    
  - platform: homeassistant
    id: door_lock
    entity_id: lock.front_door_lock
  #Lights
  - platform: homeassistant
    id: lounge_main
    entity_id: light.lounge_ceiling
    
  - platform: homeassistant
    id: salt_lamps
    entity_id: group.salt
    
  - platform: homeassistant
    id: vase
    entity_id: switch.lounge_vase_lights
    
  - platform: homeassistant
    id: patio_door
    entity_id: light.lounge_patio_door_lamp
    
  - platform: homeassistant
    id: dining_ceiling
    entity_id: light.dining_ceiling
    
  - platform: homeassistant
    id: sideboard_lamp
    entity_id: light.sideboard_lamp
    
  - platform: homeassistant
    id: dining_big_lamp
    entity_id: light.dining_big_lamp
    
  - platform: homeassistant
    id: bedside_sharon
    entity_id: light.bedside_sharon
    
  - platform: homeassistant
    id: bedside_andy
    entity_id: light.bedside_andy
    
  - platform: homeassistant
    id: bedroom_ceiling
    entity_id: light.bedroom_ceiling
    
  - platform: homeassistant
    id: wardrobe
    entity_id: light.wardrobe

    

number:
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'
      


# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: http://192.168.0.16:8123/local/NSPanel.tft
    # A little fun...
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30

    lambda: |-
    
      int status_lock=0;
      if (id(door_lock).state == "unlocked") {
        status_lock=16;
      } else if (id(door_lock).state == "locked") {
        status_lock=26;
      }
      id(disp1).send_command_printf("lock_b.picc=%i", status_lock);
      id(disp1).send_command_printf("lock_b.picc2=%i", status_lock);
      
      int status_lounge_main=0;
      if (id(lounge_main).state == "off") {
        status_lounge_main=20;
      } else if (id(lounge_main).state == "on") {
        status_lounge_main=27;
      }
      id(disp1).send_command_printf("loungemain_b.picc=%i", status_lounge_main);
      id(disp1).send_command_printf("loungemain.picc2=%i", status_lounge_main);
      
      int status_salt=0;
      if (id(salt_lamps).state == "off") {
        status_salt=20;
      } else if (id(salt_lamps).state == "on") {
        status_salt=27;
      }
      id(disp1).send_command_printf("loungesalt_b.picc=%i", status_salt);
      id(disp1).send_command_printf("loungesalt_b.picc2=%i", status_salt);
      
      int status_vase=0;
      if (id(vase).state == "off") {
        status_vase=20;
      } else if (id(vase).state == "on") {
        status_vase=27;
      }
      id(disp1).send_command_printf("loungevase_b.picc=%i", status_vase);
      id(disp1).send_command_printf("loungevase_b.picc2=%i", status_vase);
      
      int status_patio=0;
      if (id(patio_door).state == "off") {
        status_patio=20;
      } else if (id(patio_door).state == "on") {
        status_patio=27;
      }
      id(disp1).send_command_printf("patio_b.picc=%i", status_patio);
      id(disp1).send_command_printf("patio_b.picc2=%i", status_patio);
      
      int status_dining_ceiling=0;
      if (id(dining_ceiling).state == "off") {
        status_dining_ceiling=20;
      } else if (id(dining_ceiling).state == "on") {
        status_dining_ceiling=27;
      }
      id(disp1).send_command_printf("diningmain_b.picc=%i", status_dining_ceiling);
      id(disp1).send_command_printf("diningmain_b.picc2=%i", status_dining_ceiling);
      
      int status_sideboard_lamp=0;
      if (id(sideboard_lamp).state == "off") {
        status_sideboard_lamp=20;
      } else if (id(sideboard_lamp).state == "on") {
        status_sideboard_lamp=27;
      }
      id(disp1).send_command_printf("sideboard_b.picc=%i", status_sideboard_lamp);
      id(disp1).send_command_printf("sideboard_b.picc2=%i", status_sideboard_lamp);
      
      int status_dining_big_lamp=0;
      if (id(dining_big_lamp).state == "off") {
        status_dining_big_lamp=20;
      } else if (id(dining_big_lamp).state == "on") {
        status_dining_big_lamp=27;
      }
      id(disp1).send_command_printf("biglamp_b.picc=%i", status_dining_big_lamp);
      id(disp1).send_command_printf("biglamp_b.picc2=%i", status_dining_big_lamp);
      
      int status_bedside_sharon=0;
      if (id(bedside_sharon).state == "off") {
        status_bedside_sharon=21;
      } else if (id(bedside_sharon).state == "on") {
        status_bedside_sharon=28;
      }
      id(disp1).send_command_printf("sharon_b.picc=%i", status_bedside_sharon);
      id(disp1).send_command_printf("sharon_b.picc2=%i", status_bedside_sharon);
      
      int status_bedside_andy=0;
      if (id(bedside_andy).state == "off") {
        status_bedside_andy=21;
      } else if (id(bedside_andy).state == "on") {
        status_bedside_andy=28;
      }
      id(disp1).send_command_printf("andy_b.picc=%i", status_bedside_andy);
      id(disp1).send_command_printf("andy_b.picc2=%i", status_bedside_andy);
      
      int status_bedroom_ceiling=0;
      if (id(bedroom_ceiling).state == "off") {
        status_bedroom_ceiling=21;
      } else if (id(bedroom_ceiling).state == "on") {
        status_bedroom_ceiling=28;
      }
      id(disp1).send_command_printf("bedceil_b.picc=%i", status_bedroom_ceiling);
      id(disp1).send_command_printf("bedceil_b.picc2=%i", status_bedroom_ceiling);
      
      int status_wardrobe=0;
      if (id(wardrobe).state == "off") {
        status_wardrobe=21;
      } else if (id(wardrobe).state == "on") {
        status_wardrobe=28;
      }
      id(disp1).send_command_printf("wardrobe_b.picc=%i", status_wardrobe);
      id(disp1).send_command_printf("wardrobe_b.picc2=%i", status_wardrobe);
      
      
      int status_day=0;
      if (id(day_mode).state == "off") {
        status_day=16;
      } else if (id(day_mode).state == "on") {
        status_day=26;
      }
      id(disp1).send_command_printf("home.day_b.picc=%i", status_day);
      id(disp1).send_command_printf("home.day_b.picc2=%i", status_day);
      
      int status_evening=0;
      if (id(evening_mode).state == "off") {
        status_evening=16;
      } else if (id(evening_mode).state == "on") {
        status_evening=26;
      }
      id(disp1).send_command_printf("home.evening_b.picc=%i", status_evening);
      id(disp1).send_command_printf("home.evening_b.picc2=%i", status_evening);
      
      int status_night=0;
      if (id(night_mode).state == "off") {
        status_night=16;
      } else if (id(night_mode).state == "on") {
        status_night=26;
      }
      id(disp1).send_command_printf("home.night_b.picc=%i", status_night);
      id(disp1).send_command_printf("home.night_b.picc2=%i", status_night);
      
      int symbol=1;
      if (id(weather_symbol).state == "clear-night") {
        symbol=2;
      } else if (id(weather_symbol).state == "cloudy") {
        symbol=4;
        if (id(sun_sun).state == "below_horizon") {
          symbol=5;
        }
      } else if (id(weather_symbol).state == "fog") {
        symbol=7;
      } else if (id(weather_symbol).state == "hail" || id(weather_symbol).state == "snowy-rainy") {
        symbol=9;
      } else if (id(weather_symbol).state == "lightning") {
        symbol=10;
      } else if (id(weather_symbol).state == "lightning-rainy" || id(weather_symbol).state == "exceptional") {
        symbol=10;
        if (id(sun_sun).state == "below_horizon") {
          symbol=11;
        }
      } else if (id(weather_symbol).state == "partlycloudy") {
        symbol=13;
        if (id(sun_sun).state == "below_horizon") {
          symbol=5;
        }
      } else if (id(weather_symbol).state == "pouring") {
        symbol=8;
      } else if (id(weather_symbol).state == "rainy") {
        symbol=8;
      } else if (id(weather_symbol).state == "snowy") {
        symbol=9;
      } else if (id(weather_symbol).state == "sunny") {
        symbol=3;
      } else if (id(weather_symbol).state == "windy" || id(weather_symbol).state == "windy-variant") {
        symbol=5;              
      }
      id(disp1).send_command_printf("home.weather.pic=%i", symbol);
      id(disp1).send_command_printf("home.weather.pic2=%i", symbol);
      id(disp1).set_component_text_printf("tempoutside", "%.1f ", id(temp_outside).state);
      id(disp1).set_component_text_printf("home.lounge_t", "%.1f ", id(lounge_temperature).state);
      id(disp1).set_component_text_printf("lounge.lounge_t", "%.1f ", id(lounge_temperature).state);
      id(disp1).set_component_text_printf("lounge.lounge_s", "%.1f ", id(lounge_setpoint).state);
      id(disp1).set_component_text_printf("home.bed_t", "%.1f ", id(bedroom_temperature).state);
      id(disp1).set_component_text_printf("bedroom.bed_t", "%.1f ", id(bedroom_temperature).state);
      id(disp1).set_component_text_printf("bedroom.bed_s", "%.1f ", id(bedroom_setpoint).state);
      id(disp1).set_component_text_printf("office_t", "%.1f ", id(office_temperature).state);
      id(disp1).set_component_text_printf("office_s", "%.1f ", id(office_setpoint).state);
      id(disp1).set_component_text_printf("stairs_t", "%.1f ", id(stairs_temperature).state);
      id(disp1).set_component_text_printf("kitchen_t", "%.1f ", id(kitchen_temperature).state);
      id(disp1).set_component_text_printf("kitchen_s", "%.1f ", id(kitchen_setpoint).state);
      id(disp1).set_component_text_printf("spain", "%s ""Days", id(spain).state.c_str());
      auto time_text = id(homeassistant_time).now().strftime("%I:%M%p");
      id(disp1).set_component_text("home.time", time_text.c_str());
      id(disp1).set_component_text_printf("weathersum", "%s", id(weather_symbol).state.c_str());
#      id(disp1).set_component_text_printf("weathersum", "%s", "new_weather";
